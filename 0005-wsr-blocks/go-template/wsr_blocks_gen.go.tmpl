package wsr_blocks

import (
    "github.com/RoaringBitmap/roaring"
)

{{$data := .}}

{{range .Kinds}}
type BoxedValue{{ .Name}} {{.ValueType}}
func (_ BoxedValue{{.Name}}) is_boxed_value() {}
type Vector{{.Name}} []{{.ValueType}}
func (_ Vector{{.Name}}) is_vector_uncompressed()  {}
func (_ Vector{{.Name}}) is_vector()  {}
{{end}}

{{range .Compressions}}
func (_ Vector{{.Name}}) is_vector_compressed() {}
func (_ Vector{{.Name}}) is_vector()  {}
{{end}}

func Compressions() []Compression {
    return []Compression{
        {{range .Compressions}}
        Compression{tag: {{.Name}}},
        {{end}}
    }
}

func Compressed(vector VectorUncompressed, compression Compression) (VectorCompressed, bool) {
    switch vector := vector.(type) {
        {{range .Kinds}}
        case Vector{{.Name}}:
        {
            switch compression.tag {
                case Dict:
                {
                    codes := make([]uint64, len(vector))
                    unique_values := make([]{{.ValueType}}, 0)
                    
                    dict := make(map[{{.ValueType}}]uint64)
                    
                    for i, value := range vector {
                        var code uint64
                        code, ok := dict[value]
                        if !ok {
                            code = uint64(len(unique_values))
                            dict[value] = code
                            unique_values = append(unique_values, value)
                        }
                        codes[i] = code
                    }
                    
                    result := VectorDict{
                        codes:        VectorUint64(codes),
                        uniqueValues: Vector{{.Name}}(unique_values),
                    }
                    return VectorCompressed(result), true
                }
                case Size:
                {
                    {{if .IsInt}}
                    {
                        const originalSizeBits uint8 = {{.SizeBits}}
                        
                        if len(vector) == 0 {
                            return nil, false
                        }
                        
                        var max_value {{.ValueType}}
                        for _, value := range vector {
                            // TODO go 1.21 has a `max` function
                            if value > max_value {
                                max_value = value
                            }
                        }
                        
                        {{range $data.Kinds}}
                        {
                            {{if .IsInt}}
                            {{if .SizeBits | lt 64}}
                            const compressedSizeBits uint8 = {{.SizeBits}}
                            if compressedSizeBits < originalSizeBits && uint64(max_value) < (1<<compressedSizeBits) {
                                var values = make([]{{.ValueType}}, len(vector))
                                for i, value := range vector {
                                    values[i] = {{.ValueType}}(value)
                                }
                                result := VectorSize{
                                    originalSizeBits: originalSizeBits,
                                    values:           Vector{{.Name}}(values_compressed),
                                }
                                return result, true
                            }
                            {{end}}
                            {{end}}
                        }
                        {{end}}
                        return nil, false
                    }
                    {{else}}
                    {
                        return nil, false
                    }
                    {{end}}
                }
                case Bias:
                {
                    if len(vector) == 0 {
                        return nil, false
                    }
                    
                    var counts = make(map[{{.ValueType}}]int)
                    for _, value := range vector {
                        counts[value] += 1
                    }
                    var common_value {{.ValueType}} = vector[0]
                    var common_count int = 0
                    for value, count := range counts {
                        if count > common_count {
                            common_value = value
                            common_count = count
                        }
                    }
                    
                    var presence = roaring.New()
                    var remainder = make([]{{.ValueType}}, 0, len(vector)-common_count)
                    for i, value := range vector {
                        if value == common_value {
                            presence.Add(uint32(i))
                        } else {
                            remainder = append(remainder, value)
                        }
                    }
                    
                    result := VectorBias{
                        count:     len(vector),
                        value:     BoxedValue{{.Name}}(common_value),
                        presence:  *presence,
                        remainder: Vector{{.Name}}(remainder),
                    }
                    return result, true
                }
                default:
                panic("Unreachable")
            }
        }
        {{end}}
        default:
        panic("Unreachable")
    }
}

func Decompressed(vector VectorCompressed) VectorUncompressed {
    switch vector := vector.(type) {
        case VectorDict:
        {
            codes := []uint64(ensureDecompressed(vector.codes).(VectorUint64))
            switch uniqueValues := ensureDecompressed(vector.uniqueValues).(type) {
                {{range .Kinds}}
                case Vector{{.Name}}:
                {
                    values := make([]{{.ValueType}}, len(codes))
                    for i := range values {
                        values[i] = uniqueValues[codes[i]]
                    }
                    return Vector{{.Name}}(values)
                }
                {{end}}
                default:
                panic("Unreachable")
            }
        }
        case VectorSize:
        {
            switch (vector.originalSizeBits) {
                {{range $original := .Kinds}}
                {{if .IsInt}}
                case {{.SizeBits}}:
                {
                    switch values_compressed := ensureDecompressed(vector.values).(type) {
                        {{range $compressed := $data.Kinds}}
                        {{if .IsInt}}
                        case Vector{{$compressed.Name}}:
                        {
                            values := make([]{{$original.ValueType}}, len(values_compressed))
                            for i := range values {
                                values[i] = {{$original.ValueType}}(values_compressed[i])
                            }
                            return Vector{{$original.Name}}(values)
                        }
                        {{end}}
                        {{end}}
                        default:
                        panic("Unreachable")
                    }
                }
                {{end}}
                {{end}}
                default:
                panic("Unreachable")
            }
        }
        case VectorBias:
        {
            switch remainder := ensureDecompressed(vector.remainder).(type) {
                {{range .Kinds}}
                case Vector{{.Name}}:
                {
                    value := {{.ValueType}}(vector.value.(BoxedValue{{.Name}}))
                    values := make([]{{.ValueType}}, vector.count) 
                    var remainder_index int = 0
                    for i := range values {
                        if vector.presence.ContainsInt(i) {
                            values[i] = value
                        } else {
                            values[i] = remainder[remainder_index]
                            remainder_index++
                        }
                    }
                    return Vector{{.Name}}(values)
                }
                {{end}}
                default:
                panic("Unreachable")
            }
        }
        default:
        panic("Unreachable")
    }
}
