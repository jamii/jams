# https://www.sqlite.org/lang.html

root = statement_or_query semicolon? eof;
statement_or_query =
  | select
  | CREATE => create
  | INSERT => insert
  | UPDATE => update
  | DELETE => delete
  | DROP => drop
  | REINDEX => reindex;

select = select_or_values+compound_operator order_by? limit?;
select_or_values = 
  | SELECT => select_body
  | VALUES => values;
select_body = SELECT distinct_or_all? result_column+comma from? where? group_by? having? window?;
compound_operator =
  | UNION_ALL
  | UNION
  | INTERSECT
  | EXCEPT;
UNION_ALL = UNION ALL;
distinct_or_all =
  | DISTINCT
  | ALL;
result_column = # TODO
  | star
  | table_star
  | result_expr; 
result_expr = expr as_column?;
as_column = AS? column_name;
table_star = table_name dot star;
from = FROM joins;
joins = table_or_subquery join_clause*;
table_or_subquery = 
  | table_as
  | subquery_as
  | sub_joins;
sub_joins = open_paren joins close_paren;
table_as = table_name as_table? indexed?;
indexed = 
  | indexed_by
  | NOT_INDEXED;
indexed_by = INDEXED BY name;
NOT_INDEXED = NOT INDEXED;
subquery_as = subquery as_table?;
as_table = AS? table_name;
join_clause = join_op table_or_subquery join_constraint?;
join_op = 
  | comma
  | join
  | left_join
  | right_join
  | full_join
  | inner_join
  | cross_join;
join = NATURAL? JOIN;
left_join = NATURAL? LEFT OUTER? JOIN;
right_join = NATURAL? RIGHT OUTER? JOIN;
full_join = NATURAL? FULL OUTER? JOIN;
inner_join = NATURAL? INNER JOIN;
cross_join = CROSS JOIN;
join_constraint = 
  | join_constraint_on
  | join_constraint_using;
join_constraint_on = ON expr;
join_constraint_using = USING column_names;
where = WHERE expr;
group_by = GROUP BY exprs;
having = HAVING expr;
window = WINDOW TODO;
order_by = ORDER BY ordering_terms;
ordering_terms = ordering_term+comma;
ordering_term = expr collate? asc_or_desc? nulls_first_or_last?;
collate = COLLATE collation_name;
collation_name = name; # TODO
asc_or_desc =
  | ASC
  | DESC;
nulls_first_or_last = NULLS first_or_last;
first_or_last = 
  | FIRST
  | LAST;
limit = LIMIT exprs; # TODO offset

values = VALUES row+comma;
row = open_paren exprs close_paren;

create =
  | create_table
  | create_index
  | create_view;
create_table = CREATE TEMP_OR_TEMPORARY? TABLE if_not_exists? table_name column_defs;
TEMP_OR_TEMPORARY = | TEMP | TEMPORARY;
table_name = name;
column_name = name;
column_defs = open_paren column_def*comma close_paren;
column_def = column_name typ? column_constraint?;
create_index = CREATE UNIQUE? INDEX if_not_exists? index_name ON table_name open_paren indexed_column+comma close_paren (WHERE expr)?=where;
index_name = name;
indexed_column = column_name asc_or_desc?; # TODO
create_view = CREATE TEMP_OR_TEMPORARY? VIEW if_not_exists? view_name column_defs? AS select;
view_name = name;

insert = INSERT insert_or? INTO table_name column_names? select_or_values;
insert_or = OR insert_or_arg;
insert_or_arg = | ABORT | FAIL | IGNORE | REPLACE | ROLLBACK;
column_names = open_paren column_name*comma close_paren;
typ = name typ_length?;
typ_length = open_paren number (comma number)?=numbers close_paren;
column_constraint = 
  | key;
key = (| PRIMARY | UNIQUE)=kind KEY? asc_or_desc?;

update = UPDATE table_name SET column_name equal expr update_from? update_where?; # TODO
update_from = TODO;
update_where = WHERE expr;

delete = DELETE FROM table_name delete_where?;
delete_where = WHERE expr;

drop =
  | drop_table
  | drop_index
  | drop_view;
drop_table = DROP TABLE if_exists? table_name;
drop_index = DROP INDEX if_exists? index_name;
drop_view = DROP VIEW if_exists? view_name;
if_exists = IF EXISTS;
if_not_exists = IF NOT EXISTS;

reindex = REINDEX name;

exprs = expr*comma;
expr = expr_or;
expr_or = expr_and=left (OR expr_and=right)*=right;
expr_and = expr_not=left (AND expr_not=right)*=right;
expr_not = NOT*=op expr_incomp=expr;
expr_incomp = expr_comp=left expr_incomp_right*=right;
expr_incomp_right =
  | expr_incomp_postop
  | expr_incomp_in
  | expr_incomp_binop
  | expr_incomp_between;
expr_incomp_binop = op_incomp=op expr_comp=right;
expr_incomp_in = NOT? IN open_paren expr_incomp_in_right=right close_paren;
expr_incomp_in_right = 
  | select
  | exprs;
expr_incomp_between = NOT? BETWEEN expr_comp=start AND expr_comp=end;
expr_incomp_postop = op_incomp_post+=op;
expr_comp = expr_bit=left (op_comp=op expr_bit=right)*=right;
expr_bit = expr_add=left (op_bit=op expr_add=right)*=right;
expr_add = expr_mult=left (op_add=op expr_mult=right)*=right;
expr_mult = expr_unary=left (op_mult=op expr_unary=right)*=right;
expr_unary = op_unary*=op expr_atom=expr;

op_incomp = | equal | double_equal | not_equal | IS_DISTINCT_FROM | IS_NOT_DISTINCT_FROM | IS_NOT | IS | MATCH | LIKE | REGEXP | GLOB | NOT_MATCH | NOT_LIKE | NOT_REGEXP | NOT_GLOB;
IS_NOT = IS NOT;
IS_DISTINCT_FROM = IS DISTINCT FROM;
IS_NOT_DISTINCT_FROM = IS NOT DISTINCT FROM;
NOT_IN = NOT IN;
NOT_MATCH = NOT MATCH;
NOT_LIKE = NOT LIKE;
NOT_REGEXP = NOT REGEXP;
NOT_GLOB = NOT GLOB;
op_incomp_post = | ISNULL | NOTNULL | NOT_NULL;
NOT_NULL = NOT NULL;
op_comp = | less_than | greater_than | less_than_or_equal | greater_than_or_equal;
op_bit = | shift_left | shift_right | bit_and | bit_or;
op_add = | plus | minus;
op_mult = | star | forward_slash | percent;
op_unary = | bit_not | plus | minus;

expr_atom =
  | CASE => case
  | CAST => cast
  | subquery_prefix => subquery
  | open_paren => subexpr
  | function_call
  | table_column_ref
  | column_ref
  | value;

column_ref = column_name;
table_column_ref = table_name dot column_name;

subquery_prefix = exists_or_not_exists? open_paren SELECT;
subquery = exists_or_not_exists? open_paren select close_paren;
exists_or_not_exists =
  | EXISTS
  | NOT_EXISTS;
NOT_EXISTS = NOT EXISTS;

subexpr = open_paren expr close_paren;

case = CASE expr? case_when* case_else? END;
case_when = WHEN expr=when THEN expr=then;
case_else = ELSE expr;
function_call = function_name open_paren distinct_or_all? function_args? close_paren; # TODO filter/over
function_name = name; # TODO
function_args =
  | (expr+comma)=args
  | star;
value =
  | number
  | string
  | blob
  | NULL;

cast = CAST open_paren expr AS typ close_paren;