// comment
---
0

// integers
1
---
1

// floats
2.5
---
2.5

// arithmetic
1 + 2 * 3 / 4
---
2.25

// exprs
1; 2
---
2

// strings
'foo'
---
'foo'

// escapes
'this is a:\n \'string\''
---
'this is a:\n \'string\''

// empty
[]
---
[]

// array
[1, 2]
---
[1, 2]

// trailing commas
[1, 2,]
---
[1, 2]

// map
// TODO make a decision about ordering
[a = 1, 'b' = 2]
---
['b' = 2, 'a' = 1]

// mixed
['a', b=2]
---
['a', 'b' = 2]

// let
let a = 'foo';
a
---
'foo'

// let and mixed
let a = 42;
[a, 'a', a=2]
---
[42, 'a', 'a' = 2]

// set
let mut a = 1;
set a = 2;
a
---
2

// set const
let a = 1;
set a = 2;
a
---
Cannot set a non-mut variable: a

// set path empty
let mut b = [];
set b.foo = 'bar';
b
---
['foo' = 'bar']

// set path existing
let mut b = [foo = 2];
set b.foo = 'bar';
b
---
['foo' = 'bar']

// set path dyn empty
let mut b = [];
let foo = 'foo';
set b[foo] = 'bar';
b
---
['foo' = 'bar']

// set path dyn existing
let mut b = [foo = 2];
let foo = 'foo';
set b[foo] = 'bar';
b
---
['foo' = 'bar']

// set path const
let b = [foo = 2];
set b.foo = 'bar';
b
---
Cannot set a non-mut variable: b

// if false
if 0 'true' else 'false'
---
'false'

// if true
if 1 'true' else 'false'
---
'true'

// if other
if 2 'true' else 'false'
---
Expected boolean (0 or 1). Found 2

// while
let mut a = 1;
while (a) (
  set a = 0;
);
a
---
0

// while fn
let not = fn [x] if x 0 else 1;
let mut a = 0;
while (not[a == 4]) (
  set a = a + 1;
);
a
---
4

// fn naked
let add = fn [a,b] a + b;
add
---
fn<0>

// fn
let add = fn [a,b] a + b;
add[1,2]
---
3

// fn mut-var
let add = fn [a,b] a + b;
let mut x = 42;
add[1,x]
---
43

// fn mut-arg
let add = fn [a,b] a + b;
let mut x = 42;
add[1,mut x]
---
Expected const arg, found mut arg

// mut-fn
let add-into = fn [mut a, b] set a = a + b;
let mut x = 42;
add-into[mut x, 2];
x
---
44

// mut-fn const-arg
let add-into = fn [mut a, b] set a = a + b;
let mut x = 42;
add-into[x, 2];
x
---
Expected mut arg, found const arg

// mut-fn const-var
let add-into = fn [mut a, b] set a = a + b;
let x = 42;
add-into[mut x, 2];
x
---
Cannot set a non-mut variable: x

// mut fn const-var const-arg
let add-into = fn [mut a, b] set a = a + b;
let x = 42;
add-into[x, 2];
x
---
Expected mut arg, found const arg

// copy number var->var
let mut x = 1;
let y = x;
set x = x + 1;
[x,y]
---
[2, 1]

// copy map var->var
let mut x = [foo = [bar = 1]];
let y = x;
set x.foo.bar = x.foo.bar + 1;
[x,y]
---
[['foo' = ['bar' = 2]], ['foo' = ['bar' = 1]]]

// capture by value
let mut x = [foo = [bar = 1]];
let y = fn [] x;
set x.foo.bar = x.foo.bar + 1;
[x,y[]]
---
[['foo' = ['bar' = 2]], ['foo' = ['bar' = 1]]]